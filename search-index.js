var searchIndex = JSON.parse('{\
"fast_qr":{"doc":"Example","t":[13,13,13,4,13,13,13,13,13,13,4,13,13,2,2,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,13,13,13,13,4,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Checkerboard","DiagonalLines","Diamonds","ECL","Fields","H","HorizontalLines","L","LargeCheckerboard","M","Mask","Meadow","Q","QRBuilder","QRCode","QROptions","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","Version","VerticalLines","alignment_patterns_grid","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert","describe","fmt","fmt","fmt","from","from","from","from","from_abi","from_n","get","information","into","into","into","into","into_abi","is_none","max_bytes","missing_bits","none","qr","qr","qr_opt","ref_from_abi","ref_mut_from_abi","return_abi","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","svg","Circle","Diamond","Horizontal","IoError","RoundedSquare","Shape","Square","SvgBuilder","SvgError","SvgError","Vertical","background_color","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_mat","cmp","dot_color","eq","fmt","from","from","from","into","into","into","margin","new","partial_cmp","shape","to_file","to_str","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","EncodedData","QRBuilder","QRCode","QRCodeError","SpecifiedVersion","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","ecl","fmt","fmt","from","from","from","into","into","into","mask_nb","new","new","print","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"q":["fast_qr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fast_qr::convert","fast_qr::convert::svg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fast_qr::convert::svg::SvgError","","fast_qr::qr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fast_qr::qr::QRCode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["QR code pattern n°0: <code>(x + y) % 2 == 0</code>.","QR code pattern n°3: <code>(x + y) % 3 == 0</code>.","QR code pattern n°6: <code>((x*y)%2 + (x*y)%3) % 2 == 0</code>.","Error Correction Coding has 4 levels","QR code pattern n°5: <code>(x*y)%2 + (x*y)%3 == 0</code>.","High, 30%","QR code pattern n°1: <code>y % 2 == 0</code>.","Low, 7%","QR code pattern n°4: <code>((x/3) + (y/2)) % 2 == 0</code>.","Medium, 15%","The different mask patterns. The mask pattern should only …","QR code pattern n°7: <code>((x+y)%2 + (x*y)%3) % 2 == 0</code>.","Quartile, 25%","","","Same as <code>QRBuilder</code> without input.","Version n°01","Version n°02","Version n°03","Version n°04","Version n°05","Version n°06","Version n°07","Version n°08","Version n°09","Version n°10","Version n°11","Version n°12","Version n°13","Version n°14","Version n°15","Version n°16","Version n°17","Version n°18","Version n°19","Version n°20","Version n°21","Version n°22","Version n°23","Version n°24","Version n°25","Version n°26","Version n°27","Version n°28","Version n°29","Version n°30","Version n°31","Version n°32","Version n°33","Version n°34","Version n°35","Version n°36","Version n°37","Version n°38","Version n°39","Version n°40","Enum containing all possible QRCode versions","QR code pattern n°2: <code>x % 3 == 0</code>.","Returns <strong>alignments</strong> positions","","","","","","","","","","","","","","","Converts QRCode matrix to usable","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns version based on size of matrix","Computes the <strong>best version</strong> according to <code>mode</code>, <code>ecl</code> and `len``","Returns the <strong>version information</strong> we need to put for QRCodes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the <strong>max bytes</strong> that can contain a QRCode for a …","Returns QRCode’s <strong>missing padding bits count</strong> at the very …","","Wrappers to create QRCode","Generate a QR code from a string. All parameters are …","Generate a QR code from a string. All parameters are …","","","","","","","","","","","","","","","","","","","","Conversion to SVGs","Circle Shape","Diamond Shape","Horizontal Shape","Error while writing to file","RoundedSquare Shape","Different possible Shapes","Square Shape","Builder for svg, can set shape, margin, background_color, …","Error when converting to svg","Error while creating svg","Vertical Shape","Changes background color (default: #FFFFFF)","","","","","","","Generates resulting svg for a matrix","","Changes module color (default: #000000)","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes margin (default: 4)","Creates a Builder instance","","Changes shape (default: Square)","Saves the svg for a qr code to a file","Return a string containing the svg for a qr code","","","","","","","","","","","","If data if too big to be encoded (refer to …","Builder for <code>QRCode</code> struct","Enum containing all 40 QRCode versions","Contains different error when QRCode could not be created","Specified version too low to contain data","QRCode Version n°01, being 21x21","QRCode Version n°02, being 25x25","QRCode Version n°03, being 29x29","QRCode Version n°04, being 33x33","QRCode Version n°05, being 37x37","QRCode Version n°06, being 41x41","QRCode Version n°07, being 45x45","QRCode Version n°08, being 49x49","QRCode Version n°09, being 53x53","QRCode Version n°10, being 57x57","QRCode Version n°11, being 61x61","QRCode Version n°12, being 65x65","QRCode Version n°13, being 69x69","QRCode Version n°14, being 73x73","QRCode Version n°15, being 77x77","QRCode Version n°16, being 81x81","QRCode Version n°17, being 85x85","QRCode Version n°18, being 89x89","QRCode Version n°19, being 93x93","QRCode Version n°20, being 97x97","QRCode Version n°21, being 101x101","QRCode Version n°22, being 105x105","QRCode Version n°23, being 109x109","QRCode Version n°24, being 113x113","QRCode Version n°25, being 117x117","QRCode Version n°26, being 121x121","QRCode Version n°27, being 125x125","QRCode Version n°28, being 129x129","QRCode Version n°29, being 133x133","QRCode Version n°30, being 137x137","QRCode Version n°31, being 141x141","QRCode Version n°32, being 145x145","QRCode Version n°33, being 149x149","QRCode Version n°34, being 153x153","QRCode Version n°35, being 157x157","QRCode Version n°36, being 161x161","QRCode Version n°37, being 165x165","QRCode Version n°38, being 169x169","QRCode Version n°39, being 173x173","QRCode Version n°40, being 177x177","","","","","","","Computes a QRCode with given parameters","Changes the Encoding Level","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes the mask, should very rarely be used","Creates an instance of QRBuilder with default parameters","Creates a new QRCode from a ECL / version","Prints the QRCode to the terminal","","","","","","","","","","Changes the version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,1,2,1,2,1,2,0,1,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,3,1,2,3,4,1,2,3,4,1,2,3,1,2,3,0,4,1,2,3,1,2,3,4,4,3,3,3,1,2,3,4,4,4,3,3,4,0,0,0,4,4,4,1,2,3,2,1,2,3,4,1,2,3,4,1,2,3,4,0,5,5,5,6,5,0,5,0,0,6,5,7,7,5,6,7,5,6,7,5,7,5,6,7,5,6,7,5,6,7,7,5,7,7,7,7,5,6,7,5,6,7,5,6,8,9,10,0,0,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,10,12,11,12,12,10,11,10,12,11,10,12,11,12,12,11,11,10,12,11,10,12,11,10,12,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["mask",4]],[[["",0]],["ecl",4]],[[["",0]],["version",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",0]]],[[]],[[["mode",4],["ecl",4],["usize",0]],["option",4]],[[["",0]],["u32",0]],[[]],[[]],[[]],[[]],[[],["u32",0]],[[],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],null,[[["str",0]],["vec",3,[["u8",0]]]],[[["str",0],["qroptions",3]],["vec",3,[["u8",0]]]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["string",3]],[[["",0],["shape",4]],["ordering",4]],[[["",0]],["",0]],[[["",0],["shape",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["usize",0]],["",0]],[[],["svgbuilder",3]],[[["",0],["shape",4]],["option",4,[["ordering",4]]]],[[["",0],["shape",4]],["",0]],[[["",0],["qrcode",4],["str",0]],["result",4,[["svgerror",4]]]],[[["",0],["qrcode",4]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["qrcode",4],["qrcodeerror",4]]]],[[["",0],["ecl",4]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["mask",4]],["",0]],[[["string",3]],["qrbuilder",3]],[[["option",4,[["ecl",4]]],["option",4,[["version",4]]],["option",4,[["mask",4]]]],["result",4,[["qrcodeerror",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["version",4]],["",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"Mask"],[4,"ECL"],[4,"Version"],[3,"QROptions"],[4,"Shape"],[4,"SvgError"],[3,"SvgBuilder"],[13,"IoError"],[13,"SvgError"],[4,"QRCodeError"],[4,"QRCode"],[3,"QRBuilder"],[13,"V01"],[13,"V02"],[13,"V03"],[13,"V04"],[13,"V05"],[13,"V06"],[13,"V07"],[13,"V08"],[13,"V09"],[13,"V10"],[13,"V11"],[13,"V12"],[13,"V13"],[13,"V14"],[13,"V15"],[13,"V16"],[13,"V17"],[13,"V18"],[13,"V19"],[13,"V20"],[13,"V21"],[13,"V22"],[13,"V23"],[13,"V24"],[13,"V25"],[13,"V26"],[13,"V27"],[13,"V28"],[13,"V29"],[13,"V30"],[13,"V31"],[13,"V32"],[13,"V33"],[13,"V34"],[13,"V35"],[13,"V36"],[13,"V37"],[13,"V38"],[13,"V39"],[13,"V40"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};