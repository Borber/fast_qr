var searchIndex = JSON.parse('{\
"fast_qr":{"doc":"Example","t":[13,13,13,4,13,13,13,13,13,13,4,13,13,2,2,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,13,13,13,13,4,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,3,3,4,13,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Checkerboard","DiagonalLines","Diamonds","ECL","Fields","H","HorizontalLines","L","LargeCheckerboard","M","Mask","Meadow","Q","QRBuilder","QRCode","QROptions","V01","V02","V03","V04","V05","V06","V07","V08","V09","V10","V11","V12","V13","V14","V15","V16","V17","V18","V19","V20","V21","V22","V23","V24","V25","V26","V27","V28","V29","V30","V31","V32","V33","V34","V35","V36","V37","V38","V39","V40","Version","VerticalLines","alignment_patterns_grid","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","convert","describe","fmt","fmt","fmt","from","from","from","from","from_abi","from_n","get","information","into","into","into","into","into_abi","is_none","max_bytes","missing_bits","none","qr","qr","qr_opt","ref_from_abi","ref_mut_from_abi","return_abi","size","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","svg","Circle","Diamond","Horizontal","IoError","RoundedSquare","Shape","Square","SvgBuilder","SvgError","SvgError","Vertical","background_color","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_mat","cmp","default","dot_color","eq","fmt","from","from","from","into","into","into","margin","partial_cmp","shape","to_file","to_str","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","EncodedData","QRBuilder","QRCode","QRCodeError","SpecifiedVersion","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","data","default","ecl","ecl","fmt","from","from","from","index","index_mut","into","into","into","mask","mask_nb","mode","new","new","print","size","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version"],"q":["fast_qr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fast_qr::convert","fast_qr::convert::svg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fast_qr::convert::svg::SvgError","","fast_qr::qr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["QR code pattern n°0: <code>(x + y) % 2 == 0</code>.","QR code pattern n°3: <code>(x + y) % 3 == 0</code>.","QR code pattern n°6: <code>((x*y)%2 + (x*y)%3) % 2 == 0</code>.","Error Correction Coding has 4 levels","QR code pattern n°5: <code>(x*y)%2 + (x*y)%3 == 0</code>.","High, 30%","QR code pattern n°1: <code>y % 2 == 0</code>.","Low, 7%","QR code pattern n°4: <code>((x/3) + (y/2)) % 2 == 0</code>.","Medium, 15%","The different mask patterns. The mask pattern should only …","QR code pattern n°7: <code>((x+y)%2 + (x*y)%3) % 2 == 0</code>.","Quartile, 25%","","","Same as <code>QRBuilder</code> without input.","Version n°01","Version n°02","Version n°03","Version n°04","Version n°05","Version n°06","Version n°07","Version n°08","Version n°09","Version n°10","Version n°11","Version n°12","Version n°13","Version n°14","Version n°15","Version n°16","Version n°17","Version n°18","Version n°19","Version n°20","Version n°21","Version n°22","Version n°23","Version n°24","Version n°25","Version n°26","Version n°27","Version n°28","Version n°29","Version n°30","Version n°31","Version n°32","Version n°33","Version n°34","Version n°35","Version n°36","Version n°37","Version n°38","Version n°39","Version n°40","Enum containing all possible QRCode versions","QR code pattern n°2: <code>x % 3 == 0</code>.","Returns <strong>alignments</strong> positions","","","","","","","","","","","","","","","Converts QRCode matrix to usable","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns version based on size of matrix","Computes the <strong>best version</strong> according to <code>mode</code>, <code>ecl</code> and `len``","Returns the <strong>version information</strong> we need to put for QRCodes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the <strong>max bytes</strong> that can contain a QRCode for a …","Returns QRCode’s <strong>missing padding bits count</strong> at the very …","","Wrappers to create QRCode","Generate a QR code from a string. All parameters are …","Generate a QR code from a string. All parameters are …","","","","Returns the size of a QRCode for said version.","","","","","","","","","","","","","","","","","Conversion to SVGs","Circle Shape","Diamond Shape","Horizontal Shape","Error while writing to file","RoundedSquare Shape","Different possible Shapes","Square Shape","Builder for svg, can set shape, margin, background_color, …","Error when converting to svg","Error while creating svg","Vertical Shape","Changes background color (default: #FFFFFF)","","","","","","","Generates resulting svg for a matrix","","","Changes module color (default: #000000)","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes margin (default: 4)","","Changes shape (default: Square)","Saves the svg for a qr code to a file","Return a string containing the svg for a qr code","","","","","","","","","","","","If data if too big to be encoded (referring to Table 7-11 …","Builder for <code>QRCode</code> struct","A QRCode can be created using QRBuilder. Simple API for …","Contains different error when QRCode could not be created","Specified version too small to contain data","","","","","","","Computes a QRCode with given parameters","","","This array contains upto max qrcode size (177 x 177). It …","A Default QR will have all it’s fields as None and a …","Changes the Encoding Level","Defines how powerfull QRCode redundancy should be or how …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Changes the final pattern used.","Changes the mask, should very rarely be used","Mode defines which data is being parsed, between Numeric, …","Creates an instance of QRBuilder with default parameters","Creates a new QRCode from a ECL / version","Prints the QRCode to the terminal","Width &amp; Height of QRCode. If manually set, should be …","","","","","","","","","","","Changes the version","Version of the QRCode, impacts the size."],"i":[1,1,1,0,1,2,1,2,1,2,0,1,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,1,3,1,2,3,4,1,2,3,4,1,2,3,1,2,3,0,4,1,2,3,1,2,3,4,4,3,3,3,1,2,3,4,4,4,3,3,4,0,0,0,4,4,4,3,1,2,3,2,1,2,3,4,1,2,3,4,1,2,3,4,0,5,5,5,6,5,0,5,0,0,6,5,7,7,5,6,7,5,6,7,5,7,7,5,6,7,5,6,7,5,6,7,5,7,7,7,7,5,6,7,5,6,7,5,6,8,9,10,0,0,0,10,10,11,12,10,11,12,11,12,12,12,12,11,12,10,10,11,12,12,12,10,11,12,12,11,12,11,12,12,12,12,10,11,12,10,11,12,10,11,12,11,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["version",4]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["mask",4]],["mask",4]],[[["ecl",4]],["ecl",4]],[[["version",4]],["version",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[["mask",4],["formatter",3]],["result",6]],[[["ecl",4],["formatter",3]],["result",6]],[[["version",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",0]],["qroptions",3]],[[["usize",0]],["version",4]],[[["mode",4],["ecl",4],["usize",0]],["option",4,[["version",4]]]],[[["version",4]],["u32",0]],[[]],[[]],[[]],[[]],[[["qroptions",3]],["u32",0]],[[],["bool",0]],[[["version",4]],["usize",0]],[[["version",4]],["usize",0]],[[]],null,[[["str",0]],["vec",3,[["u8",0]]]],[[["str",0],["qroptions",3]],["vec",3,[["u8",0]]]],[[]],[[]],[[]],[[["version",4]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["svgbuilder",3]],["svgbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["svgbuilder",3],["qrcode",3]],["string",3]],[[["shape",4],["shape",4]],["ordering",4]],[[],["svgbuilder",3]],[[["svgbuilder",3]],["svgbuilder",3]],[[["shape",4],["shape",4]],["bool",0]],[[["svgerror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["svgbuilder",3],["usize",0]],["svgbuilder",3]],[[["shape",4],["shape",4]],["option",4,[["ordering",4]]]],[[["svgbuilder",3],["shape",4]],["svgbuilder",3]],[[["svgbuilder",3],["qrcode",3],["str",0]],["result",4,[["svgerror",4]]]],[[["svgbuilder",3],["qrcode",3]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["qrbuilder",3]],["result",4,[["qrcode",3],["qrcodeerror",4]]]],[[["qrcode",3]],["qrcode",3]],[[["",0],["",0]]],null,[[["usize",0]],["qrcode",3]],[[["qrbuilder",3],["ecl",4]],["qrbuilder",3]],null,[[["qrcodeerror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["qrcode",3],["usize",0]]],[[["qrcode",3],["usize",0]]],[[]],[[]],[[]],null,[[["qrbuilder",3],["mask",4]],["qrbuilder",3]],null,[[["string",3]],["qrbuilder",3]],[[["option",4,[["ecl",4]]],["option",4,[["version",4]]],["option",4,[["mask",4]]]],["result",4,[["qrcode",3],["qrcodeerror",4]]]],[[["qrcode",3]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["qrbuilder",3],["version",4]],["qrbuilder",3]],null],"p":[[4,"Mask"],[4,"ECL"],[4,"Version"],[3,"QROptions"],[4,"Shape"],[4,"SvgError"],[3,"SvgBuilder"],[13,"IoError"],[13,"SvgError"],[4,"QRCodeError"],[3,"QRBuilder"],[3,"QRCode"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
